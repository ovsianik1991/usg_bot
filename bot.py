import os
import pandas as pd
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

ADMIN_ID = 123456789  # <-- –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π Telegram ID

FAQ_FILE = "faq.csv"
UNKNOWN_FILE = "unknown_questions.csv"

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ FAQ
faq = pd.read_csv(FAQ_FILE)
questions_list = faq['question'].tolist()

# –°—Ç–≤–æ—Ä—é—î–º–æ unknown —Ñ–∞–π–ª, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
if not os.path.exists(UNKNOWN_FILE):
    pd.DataFrame(columns=["question"]).to_csv(UNKNOWN_FILE, index=False)

# NLP –º–æ–¥–µ–ª—å –¥–ª—è –µ–º–±–µ–¥–¥—ñ–Ω–≥—ñ–≤
model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')
faq_embeddings = model.encode(questions_list)

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø FAQ-–±–æ—Ç üöÇ\n–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è —Å–ø—Ä–æ–±—É—é –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
    )

@dp.message()
async def answer(message: types.Message):
    user_question = message.text.strip()

    # –ï–º–±–µ–¥–¥—ñ–Ω–≥ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_emb = model.encode([user_question])
    
    # –ö–æ—Å–∏–Ω—É—Å–Ω–∞ —Å—Ö–æ–∂—ñ—Å—Ç—å
    similarities = cosine_similarity(user_emb, faq_embeddings)[0]
    best_idx = np.argmax(similarities)
    
    # –ü–æ—Ä—ñ–≥ —Å—Ö–æ–∂–æ—Å—Ç—ñ
    if similarities[best_idx] >= 0.6:
        response = faq.iloc[best_idx]['answer']
        await message.answer(response)
    else:
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø-3 —Å—Ö–æ–∂–∏—Ö –ø–∏—Ç–∞–Ω–Ω—è
        top_indices = similarities.argsort()[-3:][::-1]
        top_scores = similarities[top_indices]
        
        suggestions = []
        for idx, score in zip(top_indices, top_scores):
            if score >= 0.3:  # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—Ö–æ–∂—ñ—Å—Ç—å –¥–ª—è –ø—ñ–¥–∫–∞–∑–∫–∏
                suggestions.append(f"- {faq.iloc[idx]['question']}")
        
        if suggestions:
            suggestion_text = "\n".join(suggestions)
            await message.answer(
                "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ç–æ—á–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ü§î\n–ú–æ–∂–ª–∏–≤–æ, –≤–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ –æ–¥–Ω–µ –∑ —Ü–∏—Ö –ø–∏—Ç–∞–Ω—å:\n" + suggestion_text
            )
        else:
            await message.answer("–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑–Ω–∞–π—à–æ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ü§î\n–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É.")
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
            unknown_df = pd.read_csv(UNKNOWN_FILE)
            unknown_df = pd.concat([unknown_df, pd.DataFrame({"question": [user_question]})], ignore_index=True)
            unknown_df.to_csv(UNKNOWN_FILE, index=False)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è –¥–æ FAQ
@dp.message(Command("add"))
async def add_to_faq(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    try:
        parts = message.text.split("|")
        if len(parts) != 3:
            await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add –ø–∏—Ç–∞–Ω–Ω—è | –≤—ñ–¥–ø–æ–≤—ñ–¥—å | –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")
            return
        
        _, question, answer = parts
        question = question.strip()
        answer = answer.strip()

        # –î–æ–¥–∞—î–º–æ –¥–æ FAQ
        new_row = pd.DataFrame({"question": [question], "answer": [answer]})
        faq_df = pd.read_csv(FAQ_FILE)
        faq_df = pd.concat([faq_df, new_row], ignore_index=True)
        faq_df.to_csv(FAQ_FILE, index=False)

        # –û–Ω–æ–≤–ª—é—î–º–æ –≤–µ–∫—Ç–æ—Ä–∏
        global faq_embeddings, questions_list
        questions_list.append(question)
        faq_embeddings = model.encode(questions_list)

        await message.answer(f"‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ FAQ:\n{question}")

    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —ñ —á–µ–∫–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
