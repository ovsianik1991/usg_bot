import os
import pandas as pd
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# –ë–µ—Ä–µ–º–æ —Ç–æ–∫–µ–Ω–∏ –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GROK_API_KEY = os.getenv("GROK_API_KEY")

if not API_TOKEN or not GROK_API_KEY:
    raise ValueError("Missing TELEGRAM_BOT_TOKEN or GROK_API_KEY environment variable")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

ADMIN_ID = 123456789  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π Telegram ID

FAQ_FILE = "faq_new.csv"
UNKNOWN_FILE = "unknown_questions.csv"

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ FAQ
faq = pd.read_csv(FAQ_FILE)
faq_dict = dict(zip(faq['question'], faq['answer']))

# –°—Ç–≤–æ—Ä—é—î–º–æ unknown —Ñ–∞–π–ª, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
if not os.path.exists(UNKNOWN_FILE):
    pd.DataFrame(columns=["question"]).to_csv(UNKNOWN_FILE, index=False)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ Grok API
def ask_grok(question):
    data = {
        "messages": [
            {"role": "user", "content": question}
        ],
        "model": "grok-4",
        "stream": False,
        "temperature": 0.7
    }

    headers = {
        "Authorization": f"Bearer {GROK_API_KEY}",
        "Content-Type": "application/json"
    }

    try:
        response = requests.post("https://api.x.ai/v1/chat/completions", headers=headers, json=data)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"].strip()
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ AI: {e}"

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø FAQ-–±–æ—Ç üöÇ\n–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è —Å–ø—Ä–æ–±—É—é –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")

@dp.message()
async def answer(message: types.Message):
    user_question = message.text.strip()

    # –ó–∞–ø–∏—Ç –¥–æ Grok
    response = ask_grok(user_question)

    # –Ø–∫—â–æ AI –Ω–µ –∑–Ω–∞–π—à–æ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if "–Ω–µ –∑–Ω–∞–π—à–æ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ" in response.lower():
        unknown_df = pd.read_csv(UNKNOWN_FILE)
        unknown_df = pd.concat([unknown_df, pd.DataFrame({"question": [user_question]})], ignore_index=True)
        unknown_df.to_csv(UNKNOWN_FILE, index=False)

    await message.answer(response)

# –î–æ–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ FAQ
@dp.message(Command("add"))
async def add_to_faq(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    try:
        parts = message.text.split("|")
        if len(parts) != 3:
            await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add –ø–∏—Ç–∞–Ω–Ω—è | –≤—ñ–¥–ø–æ–≤—ñ–¥—å | –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")
            return
        
        _, question, answer = parts
        question = question.strip()
        answer = answer.strip()

        new_row = pd.DataFrame({"question": [question], "answer": [answer]})
        faq_df = pd.read_csv(FAQ_FILE)
        faq_df = pd.concat([faq_df, new_row], ignore_index=True)
        faq_df.to_csv(FAQ_FILE, index=False)

        global faq_dict
        faq_dict[question] = answer

        await message.answer(f"‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ FAQ:\n{question}")

    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}")

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —ñ —á–µ–∫–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
